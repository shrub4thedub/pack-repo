[data -c pkg]
  name     python
  desc     Python programming language built from official CPython source
  ver      main
  src-type git
  src-url  https://github.com/python/cpython.git
  src-ref  main
  bin      python3
  license  Python-2.0
end

[fn check_deps]
  echo "Checking build dependencies..."
  
  # Check for required build tools
  run which gcc
  run which make
  run which git
  
  echo "✓ Core build tools found"
  echo ""
  echo "IMPORTANT: Python requires development libraries for full functionality"
  echo "Install these packages for optimal Python build:"
  echo ""
  echo "Ubuntu/Debian:"
  echo "  sudo apt install build-essential libssl-dev zlib1g-dev libncurses5-dev"
  echo "  sudo apt install libncursesw5-dev libreadline-dev libsqlite3-dev"
  echo "  sudo apt install libgdbm-dev libdb5.3-dev libbz2-dev libexpat1-dev"
  echo "  sudo apt install liblzma-dev libffi-dev uuid-dev"
  echo ""
  echo "RHEL/CentOS/Fedora:"
  echo "  sudo dnf install gcc openssl-devel zlib-devel readline-devel"
  echo "  sudo dnf install sqlite-devel gdbm-devel db4-devel libpcap-devel"
  echo "  sudo dnf install xz-devel libffi-devel libuuid-devel"
  echo ""
  echo "Without these libraries, some Python modules may not work (especially SSL/TLS)"
  echo ""
end

[fn fetch]
  echo "Cloning CPython repository..."
  
  # Use ~/.pack/tmp instead of mktemp
  env HOME
  set home ${_env_result}
  set pack_tmp "${home}/.pack/tmp"
  mkdir ${pack_tmp}
  
  # Create unique subdirectory
  set unique_dir "${pack_tmp}/python_$$"
  mkdir ${unique_dir}
  set tmpdir ${unique_dir}
  set srcdir "${tmpdir}/cpython"
  
  # Clone the repository
  cd ${tmpdir}
  run git clone --depth 1 https://github.com/python/cpython.git
  
  cd ${srcdir}
  echo "✓ CPython source downloaded"
end

[fn build]
  echo "Building Python from source..."
  echo "This will take 10-20 minutes depending on your system..."
  
  # Configure with optimizations and standard library
  echo "Configuring build..."
  run ./configure --enable-optimizations --with-ensurepip=install --enable-shared
  
  # Build Python (use all available cores)
  echo "Compiling Python..."
  run make -j$(nproc)
  
  # Verify the build succeeded
  if exists ./python
    echo "✓ Python built successfully"
    
    # Test basic functionality
    echo "Testing Python build..."
    run ./python -c "import sys; print(f'Python {sys.version}')"
  else
    echo "✗ Python build failed"
    echo "Check that all development libraries are installed"
    exit 1
  end
end

[fn install]
  echo "Installing Python..."
  env HOME
  set home ${_env_result}
  set shelf_dir "${home}/.pack/shelf/python"
  set bin_dir "${home}/.local/bin"
  
  # Create shelf and bin directories
  mkdir ${shelf_dir}
  mkdir ${bin_dir}
  
  # Install Python directly to shelf directory
  echo "Installing Python to shelf..."
  run make altinstall prefix=${shelf_dir}
  
  # Find the actual Python binary (version-specific)
  glob "${shelf_dir}/bin/python3.*"
  set python_files ${_glob_result}
  
  if exists "${python_files[0]}"
    set python_binary ${python_files[0]}
    set python_version_name $(basename ${python_binary})
    
    echo "Found Python binary: ${python_binary}"
    
    # Create main python3 symlink in shelf
    run ln -sf ${python_binary} "${shelf_dir}/bin/python3"
    run ln -sf ${python_binary} "${shelf_dir}/bin/python"
    
    # Create symlinks in user bin directory
    run ln -sf "${shelf_dir}/bin/python3" "${bin_dir}/python3"
    run ln -sf "${shelf_dir}/bin/python" "${bin_dir}/python"
    
    echo "Installed ${python_version_name} to ${shelf_dir}"
    echo "Created symlinks in ${bin_dir}"
    
    # Test the installation
    echo "Testing Python installation..."
    run ${python_binary} --version
    
    echo ""
    echo "Python installation complete!"
    echo "Run 'python3 --version' to verify installation"
    echo "Note: SSL support may be limited if development libraries were missing"
  else
    echo "✗ Python installation failed - no Python binary found"
    echo "Available files in ${shelf_dir}/bin/:"
    if exists "${shelf_dir}/bin"
      run ls -la "${shelf_dir}/bin/"
    end
    exit 1
  end
end

[fn cleanup]
  if exists ${tmpdir}
    cd /
    delete ${tmpdir}
  end
  echo "Python installation complete!"
end

[fn -i uninstall]
  echo "Uninstalling Python..."
  env HOME
  set home ${_env_result}
  set shelf_dir "${home}/.pack/shelf/python"
  set bin_dir "${home}/.local/bin"
  
  # Remove symlinks
  if exists "${bin_dir}/python3"
    delete "${bin_dir}/python3"
    echo "removed symlink ${bin_dir}/python3"
  end
  
  if exists "${bin_dir}/python"
    delete "${bin_dir}/python"
    echo "removed symlink ${bin_dir}/python"
  end
  
  # Remove shelf directory
  if exists ${shelf_dir}
    delete ${shelf_dir}
    echo "removed shelf directory ${shelf_dir}"
  end
  
  echo "Python uninstalled successfully"
end

[main]
  check_deps
  fetch
  build
  install
  cleanup
end